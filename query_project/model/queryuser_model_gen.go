// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	queryuserFieldNames          = builder.RawFieldNames(&Queryuser{})
	queryuserRows                = strings.Join(queryuserFieldNames, ",")
	queryuserRowsExpectAutoSet   = strings.Join(stringx.Remove(queryuserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	queryuserRowsWithPlaceHolder = strings.Join(stringx.Remove(queryuserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	queryuserModel interface {
		Insert(ctx context.Context, data *Queryuser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Queryuser, error)
		FindOneByUsername(ctx context.Context, username string) (*Queryuser, error)
		Update(ctx context.Context, data *Queryuser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQueryuserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Queryuser struct {
		Id         int64     `db:"id"`
		Username   string    `db:"username"`    // 登录用户名
		Passwd     string    `db:"passwd"`      // 登录用户密码
		CreateTime time.Time `db:"create_time"` // 创建时间
	}
)

func newQueryuserModel(conn sqlx.SqlConn) *defaultQueryuserModel {
	return &defaultQueryuserModel{
		conn:  conn,
		table: "`queryuser`",
	}
}

func (m *defaultQueryuserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultQueryuserModel) FindOne(ctx context.Context, id int64) (*Queryuser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", queryuserRows, m.table)
	var resp Queryuser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQueryuserModel) FindOneByUsername(ctx context.Context, username string) (*Queryuser, error) {
	var resp Queryuser
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", queryuserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQueryuserModel) Insert(ctx context.Context, data *Queryuser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, queryuserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Passwd)
	return ret, err
}

func (m *defaultQueryuserModel) Update(ctx context.Context, newData *Queryuser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, queryuserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.Passwd, newData.Id)
	return err
}

func (m *defaultQueryuserModel) tableName() string {
	return m.table
}
